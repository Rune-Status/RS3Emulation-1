/*
 * This file is part of RS3Emulator.
 *
 * RS3Emulator is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * RS3Emulator is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with RS3Emulator.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.ieldor.network.codec.login;

import io.netty.channel.ChannelHandlerContext;
import io.netty.handler.codec.MessageToMessageEncoder;
import net.ieldor.io.Packet;
import net.ieldor.io.PacketBuf;
import net.ieldor.network.codec.messages.GameLoginData;
import net.ieldor.network.codec.messages.LobbyLoginData;
import net.ieldor.network.codec.messages.LoginResponse;

/**
 * RS3Emulator
 * LobbyLoginEncoder.java
 * 16/03/2014
 * @author Sundays211
 */
public class LoginDataEncoder extends MessageToMessageEncoder<Object, Object> {

	/* (non-Javadoc)
	 * @see io.netty.handler.codec.MessageToMessageEncoder#encode(io.netty.channel.ChannelHandlerContext, java.lang.Object)
	 */
	@Override
	public Object encode(ChannelHandlerContext ctx, Object msg) throws Exception {
		if (msg instanceof LobbyLoginData) {
			return encodeLobbyLogin((LobbyLoginData) msg);
		} else if (msg instanceof GameLoginData) {
			return encodeGameLogin((GameLoginData) msg);
		} else if (msg instanceof LoginConfigData) {
			return encodeLoginConfig((LoginConfigData) msg);
		} else {
			return msg;
		}
	}
	
	private LoginResponse encodeLoginConfig (LoginConfigData config) {
		PacketBuf buf = new PacketBuf(LoginResponse.SUCCESS);
		buf.put(config.getUnknownBoolean() ? 1 : 0);
		int[] configVals = config.getConfigData();
		for (int i=0;i<configVals.length;i++) {
			if (configVals[i] != 0) {
				buf.putShort(i);
				buf.putInt(configVals[i]);
			}
		}
		Packet p = buf.toPacket();
		return new LoginResponse(LoginResponse.SUCCESS, p.getPayload(), p.getLength(), true);
	}
	
	private LoginResponse encodeGameLogin (GameLoginData data) {
		System.out.println("Sending game login...");
		PacketBuf buf = new PacketBuf(LoginResponse.SUCCESS);
		buf.put(data.rights);
		buf.put(0);//Byte
		buf.put(0);//Boolean
		buf.put(0);//Boolean
		buf.put(0);//Boolean
		buf.put(0);//Boolean
		buf.putShort(data.playerIndex);
		buf.put(data.isMember ? 1 : 0);
		buf.putTriByte(0);
		buf.put(0);//Booelan
		buf.putString("");//data.displayName
		Packet p = buf.toPacket();
		return new LoginResponse(LoginResponse.SUCCESS, p.getPayload(), p.getLength());
	}
	
	private LoginResponse encodeLobbyLogin(LobbyLoginData data) {
		int ipHash = 0;
		PacketBuf buf = new PacketBuf(LoginResponse.SUCCESS);
		buf.put(data.rights);//rights (0)
		buf.put(0);//Something between 5 and 9 (0)
		buf.put(0);//Debug boolean? (0)
		buf.putTriByte(8388608);// (-128, 0, 0)
		buf.put(0);//Byte (0)
		buf.put(0);//Boolean (0)
		buf.put(0);//Boolean (0)
		buf.putLong(data.membershipEndDate); //members subscription end (end of 2014, 1420073999999L)
		buf.put5ByteInteger(125050283515445249L);//5-byte integer
		buf.put(0x1); //0x1 - if members, 0x2 - subscription (1)
		buf.putInt(0); //(0, 0, 0, 0)
		buf.putInt(400000); //recovery questions set date
		buf.putShort(data.recoveryQuestionsSetDay); //recovery questions set day
		buf.putShort(data.messageCount); //Unread message count
		buf.putShort(data.lastLoggedInDay);//TODO: Replace this with the line below, once the lastLoggedIn method is implemented
		//buf.writeShort(player.getLastLoggedIn() == 0 ? 0 : (int)(((player.getLastLoggedIn() - 1014786000000L) / 86400000) + 1));//last logged in date (17, 17)
		if (data.lastLoginIp != null) {
			String[] ipSplit = data.lastLoginIp.split("\\.");
			ipHash = Integer.parseInt(ipSplit[0]) << 24 | Integer.parseInt(ipSplit[1]) << 16 | Integer.parseInt(ipSplit[2]) << 8 | Integer.parseInt(ipSplit[3]);
		}
		buf.putInt(ipHash); //ip part
		buf.put(data.emailStatus); //(3)email status (0 - no email, 1 - pending parental confirmation, 2 - pending confirmation, 3 - registered)
		buf.putShort(53791);//
		buf.putShort(4427);//
		buf.put(0);//0
		buf.putJagString(data.displayName);
		buf.put(10);//A byte
		buf.putInt(37396180);//An int
		buf.putShort(data.defaultWorldNodeID); //default world id (should be generated by country ids like we found in client today)
		buf.putJagString(data.defaultWorldEndpoint);//Default world connection endpoint
		Packet p = buf.toPacket();
		return new LoginResponse(LoginResponse.SUCCESS, p.getPayload(), p.getLength());
	}

}
