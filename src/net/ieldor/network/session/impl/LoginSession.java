/*
 * This file is part of Ieldor.
 *
 * Ieldor is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Ieldor is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Ieldor.  If not, see <http://www.gnu.org/licenses/>.
 */
package net.ieldor.network.session.impl;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import io.netty.channel.ChannelHandlerContext;

import java.io.IOException;
import java.math.BigInteger;

import net.ieldor.Constants;
import net.ieldor.game.model.player.LoadResult;
import net.ieldor.game.model.player.Player;
import net.ieldor.io.InputStream;
import net.ieldor.io.Packet;
import net.ieldor.io.PacketBuf;
import net.ieldor.modules.login.BinaryPlayerManager;
import net.ieldor.modules.login.LoginManager;
import net.ieldor.modules.login.MachineData;
import net.ieldor.network.codec.login.LoginPayload;
import net.ieldor.network.codec.messages.LoginHandshakeMessage;
import net.ieldor.network.codec.messages.LoginResponse;
import net.ieldor.network.session.Session;
import net.ieldor.utility.Base37Utils;
import net.ieldor.utility.ByteBufUtils;
import net.ieldor.utility.XTEA;

/**
 * An {@link Session} that handles the login request.
 *
 * @author Thomas Le Godais <thomaslegodais@live.com>
 *
 */
public class LoginSession extends Session {
	
	private LoginManager loginManager;

	/**
	 * Constructs a new {@link LoginSession} instance.
	 * @param context The context of the channel.
	 */
	public LoginSession(ChannelHandlerContext context, LoginManager loginManager) {
		super(context);
		this.loginManager = loginManager;
	}

	/* (non-Javadoc)
	 * @see net.ieldor.network.session.Session#disconnected()
	 */
	@Override
	public void disconnected() {
	}

	/* (non-Javadoc)
	 * @see net.ieldor.network.session.Session#message(java.lang.Object)
	 */
	@Override
	public void message(Object obj) {
		//System.out.println("Login message method called...");
		if (obj instanceof LoginPayload) {
			LoginPayload loginData = (LoginPayload) obj;
			ByteBuf buffer = Unpooled.wrappedBuffer(loginData.getPayload());
			if (loginData.getType() == LoginPayload.LoginType.LOBBY) {
				loginManager.runLobbyLogin(buffer, channel, context);
			}
		}
	}

	/*private Packet encodeLobbyResponse(Player player) {
		int ipHash = 0;
		PacketBuf buf = new PacketBuf(LoginResponse.SUCCESS);
		buf.put(0);//rights (0)
		buf.put(0);//Something between 5 and 9 (0)
		buf.put(0);//Debug boolean? (0)
		buf.putTriByte(8388608);// (-128, 0, 0)
		buf.put(0);//Byte (0)
		buf.put(0);//Boolean (0)
		buf.put(0);//Boolean (0)
		buf.putLong(1420073999999L); //members subscription end (end of 2014)
		buf.put5ByteInteger(125050283515445249L);//5-byte integer
		buf.put(0x1); //0x1 - if members, 0x2 - subscription (1)
		buf.putInt(0); //(0, 0, 0, 0)
		buf.putInt(400000); //recovery questions set date
		buf.putShort(4000); //recovery questions set day
		buf.putShort(0); //Unread message count
		buf.putShort(0);//TODO: Replace this with the line below, once the lastLoggedIn method is implemented
		//buf.writeShort(player.getLastLoggedIn() == 0 ? 0 : (int)(((player.getLastLoggedIn() - 1014786000000L) / 86400000) + 1));//last logged in date (17, 17)
		/*if (player.getLastIP() != null) {
			String[] ipSplit = player.getLastIP().split("\\.");
			ipHash = Integer.parseInt(ipSplit[0]) << 24 | Integer.parseInt(ipSplit[1]) << 16 | Integer.parseInt(ipSplit[2]) << 8 | Integer.parseInt(ipSplit[3]);
		}*//*
		buf.putInt(ipHash); //ip part
		buf.put(3); //(3)email status (0 - no email, 1 - pending parental confirmation, 2 - pending confirmation, 3 - registered)
		buf.putShort(53791);//
		buf.putShort(4427);//
		buf.put(0);//0
		buf.putJagString(player.getDisplayName());
		buf.put(10);//A byte
		buf.putInt(37396180);//An int
		buf.putShort(12); //(12) default world id (should be generated by country ids like we found in client today)
		buf.putJagString("127.0.0.1");//(world12.runescape.com)
		return buf.toPacket();
	}*/

}
